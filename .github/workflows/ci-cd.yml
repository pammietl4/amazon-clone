name: Smart Dynamic Multi-Language CI-CD

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  SONAR_ORG: ${{ secrets.SONAR_ORG }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  detect-changes:
    name: Detect Changed Microservices
    runs-on: ubuntu-latest
    outputs:
      changed_services: ${{ steps.detect.outputs.changed_services }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for diff

      - name: Detect changed microservices
        id: detect
        run: |
          echo "üîç Detecting changed microservices..."
          CHANGED_DIRS=$(git diff --name-only HEAD~1 HEAD | cut -d/ -f1-2 | sort -u)
          echo "Changed directories: $CHANGED_DIRS"

          VALID_SERVICES=""
          for dir in $CHANGED_DIRS; do
            if [ -d "$dir" ]; then
              VALID_SERVICES="$VALID_SERVICES $dir"
            fi
          done

          echo "‚úÖ Final changed services: $VALID_SERVICES"
          echo "changed_services=$VALID_SERVICES" >> $GITHUB_OUTPUT

  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.changed_services != '' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(format('["{0}"]', join(needs.detect-changes.outputs.changed_services, '","'))) }}

    defaults:
      run:
        working-directory: ${{ matrix.service }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1Ô∏è‚É£ Detect language
      - name: Detect project language
        id: detect-lang
        run: |
          if [ -f "package.json" ]; then
            echo "language=node" >> $GITHUB_OUTPUT
          elif [ -f "requirements.txt" ]; then
            echo "language=python" >> $GITHUB_OUTPUT
          elif [ -f "go.mod" ]; then
            echo "language=go" >> $GITHUB_OUTPUT
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            echo "language=java" >> $GITHUB_OUTPUT
          else
            echo "language=unknown" >> $GITHUB_OUTPUT

      - name: Print detected language
        run: echo "üß† Detected language: ${{ steps.detect-lang.outputs.language }}"

      # 2Ô∏è‚É£ Setup toolchains
      - name: Setup Node.js
        if: steps.detect-lang.outputs.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Setup Python
        if: steps.detect-lang.outputs.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Setup Go
        if: steps.detect-lang.outputs.language == 'go'
        uses: actions/setup-go@v5
        with:
          go-version: 1.22

      - name: Setup Java
        if: steps.detect-lang.outputs.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          case "${{ steps.detect-lang.outputs.language }}" in
            node) npm ci ;;
            python) pip install -r requirements.txt ;;
            go) go mod tidy ;;
            java) mvn clean package -DskipTests ;;
            *) echo "‚ö†Ô∏è Unknown language ‚Äî skipping build" ;;
          esac

      # 4Ô∏è‚É£ Run tests
      - name: Run tests
        run: |
          case "${{ steps.detect-lang.outputs.language }}" in
            node) npm test || echo "‚ö†Ô∏è No Node tests" ;;
            python) pytest || echo "‚ö†Ô∏è No Python tests" ;;
            go) go test ./... || echo "‚ö†Ô∏è No Go tests" ;;
            java) mvn test || echo "‚ö†Ô∏è No Java tests" ;;
          esac

      # 5Ô∏è‚É£ Dynamic SonarCloud project key (per microservice)
      - name: Set SonarCloud Project Key
        id: sonar-key
        run: |
          SERVICE=$(basename ${{ matrix.service }})
          PROJECT_KEY="amazon-clone_${SERVICE}"
          echo "SONAR_PROJECT_KEY=$PROJECT_KEY" >> $GITHUB_ENV
          echo "üéØ Using SonarCloud project key: $PROJECT_KEY"

      # 6Ô∏è‚É£ SonarCloud code scan
      - name: SonarCloud Scan
        if: steps.detect-lang.outputs.language != 'unknown'
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      # 7Ô∏è‚É£ Docker build
      - name: Build Docker image
        if: steps.detect-lang.outputs.language != 'unknown'
        run: docker build -t ${{ matrix.service }}:${{ github.sha }} .

      # 8Ô∏è‚É£ Trivy vulnerability scan
      - name: Trivy scan
        if: steps.detect-lang.outputs.language != 'unknown'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      # 9Ô∏è‚É£ Push Docker image
      - name: Log in to DockerHub
        if: success()
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Push Docker image (with version tag)
        if: success()
        run: |
          SERVICE_NAME=$(basename ${{ matrix.service }})
          VERSION_TAG=v1.0.${{ github.run_number }}
          IMAGE_NAME=${{ env.DOCKERHUB_USERNAME }}/$SERVICE_NAME
          docker tag ${{ matrix.service }}:${{ github.sha }} $IMAGE_NAME:latest
          docker tag ${{ matrix.service }}:${{ github.sha }} $IMAGE_NAME:$VERSION_TAG
          echo "üöÄ Pushing $IMAGE_NAME:$VERSION_TAG and latest"
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$VERSION_TAG